# -*- coding: utf-8 -*-
"""red_wine_quality.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10CqLcbmNSY1Js1WauscdTt2THnEURE5L

# Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""# Importing the dataset

"""

df = pd.read_csv('winequality-red.csv')
X = df.drop('quality',axis =1)
y = df['quality'].apply(lambda y_value:1 if y_value>=6.5 else 0)

df.shape

#Seeing the first five rows in the dataframe
df.head()

# Checking for null values in the dataset
df.isnull().sum()

# Create a bar chart of the frequency of each quality rating
plt.bar(df['quality'].unique(), df['quality'].value_counts().values)
plt.xlabel('Quality Rating')
plt.ylabel('Frequency')
plt.title('Frequency of Quality Ratings in Wine Dataset')
plt.show()

df_grouped = df.groupby('quality')['fixed acidity'].mean().reset_index()
plt.bar(df_grouped['quality'], df_grouped['fixed acidity'])
plt.xlabel('Wine Quality')
plt.ylabel('Fixed Acidity')
plt.title('Average Fixed Acidity by Wine Quality')
plt.show()
#not much to infer from here, correlation of fixed acidity with the quality seems pretty less

df_grouped = df.groupby('quality')['volatile acidity'].mean().reset_index()
plt.bar(df_grouped['quality'], df_grouped['volatile acidity'])
plt.xlabel('Wine Quality')
plt.ylabel('volatile Acidity')
plt.title('Average Fixed Acidity by Wine Quality')
plt.show()

#can infer that higher the volatile acidity lower is the wine quality.

df_grouped = df.groupby('quality')['citric acid'].mean().reset_index()
plt.bar(df_grouped['quality'], df_grouped['citric acid'])
plt.xlabel('Wine Quality')
plt.ylabel('Citric Acid')
plt.title('Average Fixed Acidity by Wine Quality')
plt.show()

#seems like a positive correlation of the wine quality with citric acid,let's check.

df_grouped = df.groupby('quality')['residual sugar'].mean().reset_index()
plt.bar(df_grouped['quality'], df_grouped['residual sugar'])
plt.yscale('log')
plt.xlabel('Wine Quality')
plt.ylabel('Residual Sugar(values in log)')
plt.title('Average Fixed Acidity by Wine Quality')
plt.show()

#cant comment much from here again.

df_grouped = df.groupby('quality')['chlorides'].mean().reset_index()
plt.bar(df_grouped['quality'], df_grouped['chlorides'])
plt.xlabel('Wine Quality')
plt.ylabel('Chlorides')
plt.title('Average Fixed Acidity by Wine Quality')
plt.show()

df_grouped = df.groupby('quality')['free sulfur dioxide'].mean().reset_index()
plt.bar(df_grouped['quality'], df_grouped['free sulfur dioxide'])
plt.xlabel('Wine Quality')
plt.ylabel('free sulfur dioxide')
plt.title('Average Fixed Acidity by Wine Quality')
plt.show()

df_grouped = df.groupby('quality')['total sulfur dioxide'].mean().reset_index()
plt.bar(df_grouped['quality'], df_grouped['total sulfur dioxide'])
plt.xlabel('Wine Quality')
plt.ylabel('Total sulfur dioxide')
plt.title('Average Fixed Acidity by Wine Quality')
plt.show()

df_grouped = df.groupby('quality')['density'].mean().reset_index()
plt.bar(df_grouped['quality'], df_grouped['density'])
plt.yscale('log')
plt.xlabel('Wine Quality')
plt.ylabel('Density(values in log)')
plt.title('Average Fixed Acidity by Wine Quality')
plt.show()

df_grouped = df.groupby('quality')['pH'].mean().reset_index()
plt.bar(df_grouped['quality'], df_grouped['pH'])
plt.yscale('log')
plt.xlabel('Wine Quality')
plt.ylabel('pH')
plt.title('Average Fixed Acidity by Wine Quality')
plt.show()

df_grouped = df.groupby('quality')['sulphates'].mean().reset_index()
plt.bar(df_grouped['quality'], df_grouped['sulphates'])
plt.yscale('log')
plt.xlabel('Wine Quality')
plt.ylabel('Sulphates')
plt.title('Average Fixed Acidity by Wine Quality')
plt.show()

df_grouped = df.groupby('quality')['alcohol'].mean().reset_index()
plt.bar(df_grouped['quality'], df_grouped['alcohol'])
plt.yscale('log')
plt.xlabel('Wine Quality')
plt.ylabel('Alcohol')
plt.title('Average Alcohol amount by Wine Quality')
plt.show()

import seaborn as sns
correlation = df.corr()
plt.figure(figsize=(10,10))
sns.heatmap(correlation , cbar = True, square = True, fmt = '.1f', annot = True, annot_kws = {'size':8})

"""# Splitting the dataset"""

from sklearn.model_selection import train_test_split
X_train , X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2 , random_state = 42)

"""# Training the dataset"""

from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor(n_estimators = 100,random_state = 3)
regressor.fit(X,y)

"""# Making predictions"""

y_pred = regressor.predict(X_test)

"""# Checking for the accuracy score"""

from sklearn.metrics import r2_score
accuracy = r2_score(y_test,y_pred)
print(accuracy)

"""# Making a prediction for a random data from the dataset"""

X_test_prediction = regressor.predict([[7.5,0.5,0.36,6.1,0.071,17,102,0.9978,3.35,0.8,10.5]])
if(X_test_prediction >= 6.5):
  print("1(Good Quality Wine)")
else:
  print("0:Not a good quality wine")

"""

7.5,0.5,0.36,6.1,0.071,17,102,0.9978,3.35,0.8,10.5 were the features and 5 was the quality which means it was bad

"""